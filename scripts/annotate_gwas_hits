#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long qw(GetOptions :config no_ignore_case);
use Pod::Usage;

# convert snp_sites to allele names, annotate and add product information

=head1  SYNOPSIS

 annotate_gwas_hits -i /path/to/file -g /path/to/gff_file -o /path/to/output_file 

 Input-Output:	
 --input		input pyseer_output file [required]
 --output	path to output file [required] 
 --pirate	pirate gene familes file [required]
 --column	column containing snps to convert [default: 0] 
 --gff-core		pirate gff file [optional]
 --gff-igr		piggy gff file [optional]
 --treewas-filter		filter on p-value of all three scores [default: <1]
 
 General:
 -h|--help 		usage information
 
=cut

# option variables
my $input = "";
my $output = "";
my $gff = "";
my $gff_igr = "";
my $column = 0;
my $pirate = "";
my $pheno = "";
my $filter = 1;

my $help = 0;

GetOptions(

	'help|?' 	=> \$help,
	'input=s' 	=> \$input,
	'gff-core=s' 	=> \$gff,
	'gff-igr=s' 	=> \$gff_igr,
	'column=i'	=> \$column,
	'pirate=s' => \$pirate,
	'phenotypes' => \$pheno,
	'output=s'	=> \$output,
	'treewas-filter=f' => \$filter,
	
) or pod2usage(1);
pod2usage(1) if $help == 1;
 
# file check
die " - ERROR: no input file specified" if $input eq "";
die " - ERROR: no output file specified" if $output eq "";
die " - ERROR: no gff file specified" if $gff eq "";
#die " - ERROR: no pirate file specified" if $pirate eq "";

# [optional] parse pirate file
my %gene_info = ();
my %product_info = ();
if ($pirate ne ""){

	open PIR, $pirate or die " - ERROR: could not open pirate file - $pirate\n";
	while (<PIR>){
	
		my $line  = $_;
		chomp $line;
	
		my @vars = split(/\t/, $line);
	
		# FASTA section
		unless (/^allele/){
			
			my $group = $vars[1];
			my $gene = $vars[2];
			my $product = $vars[3];
			
			$product_info{$group} = $product;
			$gene_info{$group} = $gene;
			
		}
	}close PIR;

}

# parse core GFF
my %pos = ();
my @features = ();
my $f_count = 0; 
my %feature_info = ();
open GFF, $gff or die " - ERROR: could not open GFF - $gff\n";
while (<GFF>){
	
	my $line  = $_;
	chomp $line;
	
	my @vars = split(/\t/, $line);
	
	# FASTA section
	if (/^##FASTA/){
		last;
	}
	# header
	elsif(/^#/){
		
	}else{
		
		my $start = $vars[3];
		my $end = $vars[4];
		
		my $id = "";
		for my $i (split(/;/, $vars[8])){
			if ($i =~ /^ID=(.+)/){
				$id = $1;
			}
		}
	
		if ($id ne ""){
			
			# store feature index
			push(@features, $id);
			++$f_count;
			
			# store feature start/stop
			$feature_info{$id} = $start;
			 
			# store position (+1);
			for my $i ($start..$end) {
				$pos {$i} = $f_count;
			}
					
		}
	
	}
	
}close GFF;


# parse intergenic GFF
my %pos_igr = ();
my @features_igr = ();
my $f_count_igr = 0; 
my %feature_info_igr = ();
if ($gff_igr ne ""){
	open GFF_IGR, $gff_igr or die " - ERROR: could not open GFF - $gff_igr\n";
	while (<GFF_IGR>){
	
		my $line  = $_;
		chomp $line;
	
		my @vars = split(/\t/, $line);
	
		# FASTA section
		if (/^##FASTA/){
			last;
		}
		# header
		elsif(/^#/){
		
		}else{
	
			my $start = $vars[3];
			my $end = $vars[4];
		
			my $id = "";
			for my $i (split(/;/, $vars[8])){
				if ($i =~ /^ID=(.+)/){
					$id = $1;
				}
			}
		
			if ($id ne ""){
			
				# store feature index
				push(@features_igr, $id);
				++$f_count_igr;
			
				# store feature start/stop
				$feature_info_igr{$id} = $start;
				 
				# store position (+1);
				for my $i ($start..$end) {
					$pos_igr {$i} = $f_count_igr;
				}
					
			}
	
		}
	
	}close GFF_IGR;
}

# open output file
open OUT, ">$output" or die " - could not open output file ($output)\n";

# identify SNP lines and replace with allele name - add original value to a note column
my $count = 0;
my %score_hash = (1 => "terminal",	2 => "subsequent", 3 => "simultaneous");
open IN, $input or die " - ERROR: could not open input file";
while (<IN>){
	
	my $line = $_;
	chomp $line;
	
	my @vars = split(/\t/, $line);
	
	# headers 
	if(/^#/){
		print OUT "$line\n";
	}
	elsif ( $count == 0 ){
	
		++$count;
	
		my $header_line = sprintf( "%s\t%s\t%s\t%s\t%s\t%s", $vars[$column], "variant_type\tsnp_position\tgene_family\tallele_id", "gene_name", "product", "mutation_type", join("\t", @vars[1..$#vars]) );
		
		# add headers for treewas min score
		if ($filter<1){
		 	$header_line = "$header_line\tmin_p\tmin_type\tdirection";
		}
		
		print OUT $header_line."\n";
		
		
	}else{
	
		++$count;
	
		# variables
		my $var_type = "";
		my $allele = "";
		my $family = "";
		my $pos_no = "";
	
		# core snps
		if ( ($vars[$column] =~/(\d+)_[ATCGN]_[ATCGN]-core$/) || ($vars[$column] =~/(\d+)_[ATCG]_[ATCG]-$/) ){
		
			$var_type = "snp";
		
			$pos_no = $1;
			my $org = $vars[$column];
		
			# replace column value
			die " - ERROR: no feature for position ($pos_no)\n" unless $pos{$pos_no};
			my $replace_idx = $pos{$pos_no};
			my $replace = $features[$replace_idx-1];
			$allele = $replace;
		
		}
		# intergenic snps
		elsif ( $vars[$column] =~/(\d+)_[ATCGN]_[ATCGN]-igr$/ ){
		
			$var_type = "igr_snp";
		
			$pos_no = $1;
			my $org = $vars[$column];
			
			#print "$pos_no-$org\n";
		
			# replace column value
			die " - ERROR: no feature for position ($pos_no)\n" if !($pos_igr{$pos_no});			
			my $replace_idx = $pos_igr{$pos_no};
			my $replace = $features_igr[$replace_idx-1];
			$allele = $replace;
		
		}
		# snp error
		elsif ( $vars[$column] =~/(\d+)_[ATCGN]_[ATCGN]/ ){
		
			die " - WARNING: unrecognised SNP: $line\n";
		
		}
		# fission-fusion
		elsif ($vars[$column] =~/(.+)\-ff/){
			$var_type = "fission_fusion";
			$allele = $1;
		}	
		# duplication
		elsif ($vars[$column] =~/(.+)\-d/){
			$var_type = "duplication";
			$allele = $1;
		}
		# accessory p-a
		elsif ($vars[$column] =~/(.+)\-aa/){
			$var_type = "accessory_allele";
			$allele = $1;
		}
		# accessory allele
		elsif ($vars[$column] =~/(.+)\-a/){
			$var_type = "accessory_pa";
			$allele = $1;
		}
		# core allele
		elsif ($vars[$column] =~/(.+)\-c/){
			$var_type = "core_allele";
			$allele = $1;			
		}
		elsif ($vars[$column] =~/(.+)\-igr/){
			$var_type = "intergenic_pa";
			$allele = $1;			
		}
		else{
		
			print $line; exit;
		}
	
		# identify gene family from allele number
		#print "$allele\n";
		if ( ($var_type ne "igr") && ($var_type ne "igr_snp") ){
		
			if( $allele =~ /^(\S+\_\d+)\_\d+/ ){
				$family = $1;	
			}
			elsif( $allele =~ /^\S+\_\d{1,3}$/ ){
				$family = "$allele";
			}
			elsif( $allele =~ /^(\S+)\_\d+/ ){
				$family = $1;
			}
			else{
				$family = "$allele";
			}
			
		}else{
			$family = $allele;
		}
		#print "$family\n";
		
		# [optional] identify gene and product information
		my $gene = "";
		my $product = "";
		my $mut_type = "";
		if ( ($pirate ne "") && ($var_type ne "intergenic_pa") && ($var_type ne "igr_snp")){
			$gene = $gene_info{$family};
			$product = $product_info{$family};
		}
		
		# find snp position in gene
		my $snp_pos = "";
		if ( $var_type eq "snp"  ){
			
			my $start = $feature_info{$family};
			$snp_pos = $pos_no - $start + 1; # adjust start pos to 1	
			
		}
		if ( $var_type eq "igr_snp"  ){
			
			my $start = $feature_info_igr{$allele};
			$snp_pos = $pos_no - $start + 1; # adjust start pos to 1	
			
		}
			
		# print to file
		my $outline = sprintf( "%s\t%s\t%s\t%s\t%s\t%s", $vars[$column], "$var_type\t$snp_pos\t$family\t$allele", $gene, $product, $mut_type, join("\t", @vars[1..$#vars]) );
		
		# calculate minimum p-value, direction and min score type 
		if ($filter<1){
		
			# find min p
			my $min_p = 1;
			my @pvars = @vars[($#vars-2)..$#vars];
			
			my @idx = ();
			my $min_idx = 0;
			for (0..2){
				if ( $pvars[$_] < $min_p ){
					$min_p = $pvars[$_];
					$min_idx = $_;
				}
				$idx[$_] = 1 if $pvars[$_] < $filter;
			}
			
			# find min score type
			my @scores = @vars[($#vars-5)..($#vars-3)];
			my $min_type = $score_hash {$min_idx + 1};
			
			# find direction
			my $min_score = $scores[$min_idx];
			my $direction = "p";
			$direction = "n" if $min_score < 0; 
			
			# add to outline
			$outline = "$outline\t$min_p\t$min_type\t$direction";
			
		}

		print OUT $outline."\n";
	
	}
	

}close IN;
 
