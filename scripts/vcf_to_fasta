#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use Pod::Usage;

# convert vcf to fasta file - filter sites that do not meet thresholds (replace with n). 

=head1  SYNOPSIS

 vcf_2_fasta -i /path/to/vcf_file -o /path/to/output_file

 Input/Output:
 -i|--input		input vcf file [required]
 -o|--output		output fasta file [required]
 
 Filtering options:
 --fl|freq-low		min snp frequency to include in output 
			[default: 0.00]
 --fh|freq-high		max snp frequency to include in output 
			[default: 1.00]
 -n|--n-sites		include n-sites [default: exclude]
 -l|--list		list of samples to include [default: off]
			
 General:
 -h|--help		usage information
 
=cut

# switch buffer off 
$| = 1;

# variables
my $vcf = "";
my $output = "";

my $l_threshold = 0.00;
my $h_threshold = 1;
my $ns = 0;
my $list = '';

my $help = 0; 

my $type = 'auto';

GetOptions(

	'help|?' 	=> \$help,
	
	'input=s' 	=> \$vcf,
	'output=s'	=> \$output,
	
	'fl|freq-low=f' => \$l_threshold,
	'fh|freq-high=f' => \$h_threshold,
	'ns' => \$ns,
	'list=s' => \$list,
	
	'type=s' => \$type,
	
) or pod2usage(1);
pod2usage(1) if $help;
pod2usage( {-message => q{ - ERROR: input vcf is a required arguement}, -exitval => 1, -verbose => 1 } ) if $vcf eq ''; 
pod2usage( {-message => q{ - ERROR: output file is a required arguement}, -exitval => 1, -verbose => 1 } ) if $output eq ''; 
die " - ERROR: --type only accepts nuc,aa,auto\n" unless ( ($type eq "nuc") || ($type eq "aa") || ($type eq "auto") );

# test type of vcf input 
my $aa = 0;
if ($type eq "auto"){

	my $test_count = 0;
	my $non_atcg = 0;
	open VCF, $vcf or die "VCF file did not open.\n";
	while(<VCF>){

		my $l = $_;
		chomp $l;
	
		my @line = split(/\t/, $l, -1);
	
		# store headers
		if( (/^#CHROM\tPOS/) || (/^#/) ){
		}elsif(/^\S+\t/){
		
			$test_count++;
	
			my $ref = uc($line[3]);
			my $alt = uc($line[4]);
			my @alleles = ( $ref , split(/,/, $alt ) );
		
			# test for non-nucleotide characters
			$non_atcg = 0;
			for (@alleles){
				unless ( $_ =~ /[ATCGN*]/){
					$non_atcg = 1;
					last;
				}
			}
		}
	
		# check for atcgn  
		if ($non_atcg == 1){
			$aa = 1;
			last;
		}
		last if ($test_count >= 1000);

	}close VCF;
	
}


# feedback 
if ($aa == 1){
	print " - vcf being processed as including amino acid sequence\n";
}else{
	print " - vcf being processed as including nucleotide sequence\n";
}

# [optional] open list file
my %list  = (); 
my $no_samples_list = 0;
if ($list ne ''){
	open LIST, $list or die " - ERROR: could not open list ($list)\n";
	while (<LIST>){
	
		my $line = $_;
		chomp $line;
		
		my @vars = split(/\t/, $line, -1);
		
		$list {$vars[0]} = 1;
		
	}close LIST;
	
	# feedback
	$no_samples_list = keys(%list); 
	print " - $no_samples_list samples to include from list file.\n";
}

# parse vcf file.
my $no_sites = 0;
my $no_variants = 0;
my $no_stored_vars = 0;
my $n_vars = 0; 
my $no_inc_sites = 0;
my $no_samples = 0;
my @headers = ();
my @include = ();

my @storage_var = ();

# find maximum size of variants
print " - calculating maximum number of positions\n";
my %pos_hash = ();
open VCF, $vcf or die "VCF file did not open.\n";
while(<VCF>){
	unless(/^#/){
		my @line = split(/\t/, $_, -1);
		$pos_hash{$line[1]} = 1;		
	}
}
my $max_pos = scalar(keys(%pos_hash));
my $temp_string = join("", (0 x $max_pos) );
%pos_hash = ();

# process file 
open VCF, $vcf or die "VCF file did not open.\n";
while(<VCF>){
	
	my $l = $_;
	chomp $l;
	
	my @line = split(/\t/, $l, -1);
	
	# store headers
	if(/^#CHROM\tPOS/){
		
		@headers = @line;
		
		# check for samples in list 
		if ($list ne ''){
			
			for my $t ( 9..$#headers ){ 
				if ($list{$headers[$t]}){
					$list {$headers[$t]} = 2;
					push(@include, $t);
				}
			}
		
		}else{
			
			for my $t ( 9..$#headers ){ push(@include, $t) }; 	
		
		}
 
		# initialise storage
		for my $ar_idx ( 0..$#include ){ 				
			$storage_var[$ar_idx] = $temp_string;
		}
		
		# list missing samples
		my @missing_samples = ();
		for ( keys %list ){
			push(@missing_samples, $_) if $list{$_} == 1;
		}
		print "missing samples:\n" if scalar(@missing_samples) > 0;
		print sprintf("%s\n", join("\n", @missing_samples)) if scalar(@missing_samples) > 0;
		
		# feedback
		$no_samples = @include; 
		print " - $no_samples samples found in vcf headers\n";
		print " - 0 variant sites processed.";
		
	}
	elsif(/^#/){
	}elsif(/^\S+\t/){
	
		$no_sites++;	
		
		# sanity check
		die " - ERROR: No samples found in header line.\n" if $no_samples == 0;
		
		# variables
		my $pos = $line[1];
		my $ref = uc($line[3]);
		my $alt = uc($line[4]);
				
		# replace alternative gap characters with *
		$alt =~ s/\-/\*/g;
		$ref =~ s/\-/\*/g;
		$alt =~ s/\N/\*/g if $aa == 0;
		$ref =~ s/\N/\*/g if $aa == 0;
		
		# store all alleles (inc ref as allele)
		my @alleles = ( $ref , split(/,/, $alt ) );
		
		# find number Ns 
		my $n_Ns = 0;
		for (@alleles) { ++$n_Ns if $_ eq "\*" };
		$n_vars += $n_Ns;
		
		# find number of alleles excluding gaps [optionally include with --n]
		my $no_alleles = @alleles;
		$no_variants += $no_alleles;
		$no_alleles = $no_alleles - $n_Ns if $ns == 0;
		my %al_hash = ();
		
		# process if there is > 1 allele 
		if ( $no_alleles > 1 ){
			
			my %inc = ();
			my $no_alleles_ch2 = 0; 
			for my $a_idx (0..$#alleles) {
		
				my $a_char = $alleles[$a_idx];
				
				# exclude ns [optionally include with --n ]
				if( ($ns == 1) || ( ($ns == 0) && ($a_char ne "\*") ) ){
										
					# print each variant
					my @inc_idx = ();
					my $s_count = 0; 				
					for my $t ( @include ){ 	
			
						my $v = $line[$t];
				
						if ($v == $a_idx){
							push(@inc_idx, $t); 
							++$s_count;
						}
						
					}
					
					# increment second allele check
					#if ($s_count > 0 ){
					#	$no_alleles_ch2++;
					#	$al_hash{$a_idx} = 1; 
					#}
					
					# frequency of variants in samples
					my $freq = $s_count/$no_samples;
					
					# store variant if between frequency thresholds and increment second allele check 
					if ( ( $freq <= $h_threshold ) && ( $freq >= $l_threshold ) ){
					
						$no_alleles_ch2++;
						$al_hash{$a_idx} = 1; 
						
						# include base at this position
						for (@inc_idx){
							$inc{$_} = $a_char;
						}
						
					}
				}
			}
			
			# store variants
			if ( $no_alleles_ch2 > 1 ){ # check for > 1 alleles (list file may effect this)
			
				# increment counters
				$no_inc_sites++;
				$no_stored_vars += scalar(keys(%al_hash)); 
				
				for my $ar_idx ( 0..$#include){ 

					my $pos  = $include[$ar_idx];
				
					if( $inc{$pos} ){
						substr $storage_var[$ar_idx], ($no_inc_sites-1), 1, $inc{$pos};
						
					}else{
						substr $storage_var[$ar_idx], ($no_inc_sites-1), 1, "*";
					}
			
				}
			}
			
		}
		
		# feedback
		if ( $no_sites%1000 == 0 ){
			print "\r - $no_sites variant sites processed.";
		}
	}
	
	# test line
	#last if ($no_sites == 1000);	
			
}close VCF;

# feedback
print "\r - $no_sites variant sites processed - $no_inc_sites included in output.\n";
print " - $no_stored_vars/$no_variants variants were printed to output file [freq: $l_threshold-$h_threshold].\n";
print " - printing fasta file...\n";

# print file as fasta
open OUT, ">$output" or die $!;
for my $ar_idx ( 0..$#include ){ 
				
	my $t = $include[$ar_idx];
	my $header = $headers[$t];
	my $outline = $storage_var[$ar_idx];
	$outline =~ s/0//g;
		
	# print to file plus header
	local $" = '';
  	print OUT ">$header\n$outline\n";
}

# feedback 
print " - complete\n";

exit;
