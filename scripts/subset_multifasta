#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long qw(GetOptions);
use Pod::Usage;
use Cwd 'abs_path';
use File::Basename;
use Text::Wrap;

# subset multifasta on list or positions

=head1  SYNOPSIS

 subset_multifasta -i /path/to/fasta -l /pathto/list -o /path/to/output

 Input/Output:
 -i|--input		input multifasta file [required]
 -l|--list		list of samples [optional]
 -o|--output		output file [required]	
 -p|--positions	positions to extract, dash seperated [optional]
 
 -h|--help		usage information
 
=cut

# switch off buffering
$|++;

# command line options
my $help = 0;

my $list = "";

my $input_file = '';
my $output_dir = '';

my $pos = "";

GetOptions(

	'help|?' 	=> \$help,
	'input=s' 	=> \$input_file,
	'list=s' 	=> \$list,
	'output=s'	=> \$output_dir,
	'positions=s'  => \$pos,	
) or pod2usage(1);
pod2usage(1) if $help;

# check for mandatory input arguments
pod2usage( {-message => q{input fasta is a required argument}, -exitval => 1, -verbose => 1 } ) if $input_file eq ''; 
#pod2usage( {-message => q{list is a required argument}, -exitval => 1, -verbose => 1 } ) if $list eq ''; 
pod2usage( {-message => q{output is a required argument}, -exitval => 1, -verbose => 1 } ) if $output_dir eq '';

# expand input and output files/directories
$input_file = abs_path($input_file);
die "Input file not found.\n" unless -f "$input_file";

# [optional] parse list
my %shash = ();
if ( $list ne "" ){

	open LIST, "$list" or die " - ERROR: could not open list - $list\n";
	while (<LIST>){
	
		if(/^(.+)$/){
			$shash{$1} = 1;
		}
		
	}close LIST;
	
	# feedback
	my $no_sam = scalar(keys %shash);
	print " - $no_sam samples in list (--list) will be included in output\n";
		
}
my @samples = keys(%shash);

# open fasta file 
open OUT, ">$output_dir" or die " - ERROR: could not open output file\n";

# parse fasta file
my $store = 0;
my @seq = (); 
my $header = "";
open FILE, "$input_file" or die "$input_file file did not open\n";
while (<FILE>){
	
	if(/^>(.+)$/ ){
		
		$header = $1;
		
		# print previous sequence
		if ($store == 1){
		
			my $s = join("", @seq);
			
			if ($pos ne ""){
			
				my @p = split(/\-/, $pos);
				die " -  ERROR: wrong input for -p\n" if scalar(@p) != 2;
				
				my $diff = $p[1]-$p[0]+1;
				my $o_seq = substr($s, $p[0], $diff); 	
				print OUT ">$header\n$o_seq\n"; 
				
			}else{
				print OUT ">$header\n$s\n";
			}
		
		}
		
		# print and store if matching
		if ( ($list eq "") || ($shash{$header}) ){
			$store = 1;
			$shash{$header} = 2;
			
		}else{
			$store = 0;
		}
		
		
		
	}elsif(/^([ATCGN\-]+)$/){
		
		push(@seq,"$1") if $store == 1; 
	}
}

# print last sequence
if ($store == 1){

	my $s = join("", @seq);
	
	if ($pos ne ""){
	
		my @p = split(/\-/, $pos);
		die " -  ERROR: wrong input for -p\n" if scalar(@p) != 2;
		
		my $diff = $p[1]-$p[0]+1;
		my $o_seq = substr($s, $p[0], $diff);
		
		print OUT ">$header\n$o_seq\n"; 
		
	}else{
		print OUT ">$header\n$s\n";
	}

}

# check all samples found
my $missing = 0;
for my $k ( keys %shash ){

	if ($shash{$k} == 1){
		print " - WARNING: $k missing for input file\n";
		++$missing;
	}
} 

# feedback
print " - $missing sequences missing from input file\n";

exit
