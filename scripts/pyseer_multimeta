#!/usr/bin/env perl
 
use strict;
use warnings qw(all);

use Getopt::Long qw(GetOptions :config no_ignore_case);
use Pod::Usage;
use File::Basename;

# run pyseer -lmm on a phenotype file containing multiple binary phenotypes

=head1  SYNOPSIS

	pyseer_multimeta 
	
 Input variants:
 --pres 	input variant presence absence file [optional]
 --vcf	input vcf file [optional]
 --kmers	input kmer file [optional]
 [required: one of the above]
 
 Phenotype/Similarities:
 --sim	similarity matrix [required]
 --phen	phenotype table [required] 
 
 Pyseer Options:
 --min-af	frequency to exclude minor allele [default: 0.01]
 --max-af	frequency to exclude major allele [default: 0.01]
 
 Output:
 --output 	output directory [required] 
 --scripts	path to pyseer scripts, enables additional 
 		outputs [optional] 
  
 Usage:
 --prints	print samples to pyseer output files
 --r-lmm	reuse lmm file, only use if metadata and variants
 		match exactly [default: off] 
 --no-qq	switch off qqplot [default: on if --scripts]
 --cpus		number of cpus to use for analysis [default: 1]
 -q|--quiet	switch off verbose [not implemented]
 -h|--help 	usage information
  
=cut

# command line options
my @vcf = ();
my @pres = ();
my @kmers = ();

my $sim = '';
my $phenotype = '';
my $output_dir = '';
my $pyseer_scripts = '';

my $print_samples = 0;

my $min_af = 0.01;
my $max_af = 0.99;

my $rlmm = 0;
my $no_qq = 0;
my $cpus = 1;
my $quiet = 0;
my $help = 0;

pod2usage(1) if scalar(@ARGV) == 0;
GetOptions(

	'pres=s' 	=> \@pres,
	'vcf=s'	=> \@vcf,
	'kmers=s'	=> \@kmers,
	
	'similarites=s'	=> \$sim,
	'phenotype=s' => \$phenotype,
	'output=s' => \$output_dir,
	'scripts=s' => \$pyseer_scripts,
	
	'prints' => \$print_samples,
	
	'min-af' => \$min_af,
	'max-af' => \$max_af,
	
	'r-lmm'	=> \$rlmm,
	'no-qq'	=> \$no_qq,
	'cpus=i'	=> \$cpus,
	'quiet'	=> \$quiet,	
	'help|?' 	=> \$help,

) or die pod2usage(1);
pod2usage(1) if $help;

# check options
die " - ERROR: must specify phenotype file with --phenotype\n" if $phenotype eq "";
die " - ERROR: must specify output directory with --output\n" if $output_dir eq "";
die " - ERROR: must specify similarities file with --sim\n" if $output_dir eq "";

# check output directory exists or can be created
unless ( -e $output_dir ){
	die " - ERROR: could not make $output_dir" unless mkdir $output_dir;
}

# check vcf, kmer, pres files
open LIST, ">$output_dir/file_index.txt"; 
my %input_files = ();
my $count = 0;
for (@kmers){
	++$count;
	$input_files{$count}{"file"} = $_;
	$input_files{$count}{"com"} = "--kmers";
	print LIST "$count\tkmers\t$_\n";
}
for (@vcf){
	++$count;
	$input_files{$count}{"file"} = $_;
	$input_files{$count}{"com"} = "--vcf";
	print LIST "$count\tvcf\t$_\n";
}
for (@pres){
	print "$_\n";
	++$count;
	$input_files{$count}{"file"} = $_;
	$input_files{$count}{"com"} = "--pres";
	print LIST "$count\tpres\t$_\n";
}close LIST;
my $total_inputs = $count;
die " - ERROR: supply inputs with either --vcf, --pres or --kmers\n" if $total_inputs == 0;

# check number of phenotypes
my $p_count;
my %p_types = ();
my %samples = ();
my @phenotypes = ();
open PHEN, $phenotype or die " - ERROR: could not open $phenotype\n";
while (<PHEN>){
	
	++$p_count;
	
	my $line = $_;
	chomp $line;
	
	my @vars = split(/\t/, $line, -1);  
	
	# headers
	if($p_count == 1){
		
		# store phenotypes
		@phenotypes = @vars[1..$#vars];
		for (@phenotypes) { $p_types {$_} = 1 };
				
	}
	# values
	else{
	
		# check sample
		print " - WARNING: $vars[0] included in phentypes more than once\n" if $samples{$vars[0]}; 		
			
		# store sample name
		$samples{$vars[0]} = 1; 
		
		# check phenotype type (0,1,NA is binary, otherwise continuous)
		for my $i ( 1..$#vars ){
			
			if ($vars[$i] !~ /1|0|NA/){
				$p_types { $phenotypes[$i-1] } = 2;
			} 
			
		}
		
	}
}close PHEN;

# number of samples/phenotypes
my $no_sample = keys(%samples);
my $no_phenotypes = scalar(@phenotypes);

# feedback 
print "\n - samples = $no_sample\n";
print " - testing $no_phenotypes phenotype(s) on $total_inputs input files:\n";

# loop through all phenotypes
for my $i (0..$#phenotypes){
	
	# phenotype
	my $p = $phenotypes[$i];
	
	# reset lmm initialisation variable
	my $lmm_file = "";
		
	# check phenotype
	my $ptype = "";
	$ptype = "binary" if $p_types{$p} == 1;
	$ptype = "continuous" if $p_types{$p} == 2;
	
	# feedback 
	print "\n - $p ($ptype):\n";
	
	# output directory
	my $p_out = "$output_dir/$p"; 
	unless ( -e $p_out ){
		die " - ERROR: could not make $p_out" unless mkdir $p_out;
	}
	
	# loop through all input files
	for my $f (sort {$a<=>$b} keys %input_files){
		
		# file
		my $file = $input_files{$f}{"file"};
		my $com = $input_files{$f}{"com"};
		
		# feedback
		print "\n\t- file: $file ($com):\n";
		 
		# prepare command line	
		my @args = ("--min-af $min_af", "--max-af $max_af");
		
		# NOTE: sample lists have to match between runs - if the original LMM removes some isolates from the sample list then --load-lmm will throw an error in later runs
		# either check inputs abeforehand or run LMM each time
		
		if ($rlmm == 0){
			$lmm_file = "$p_out/lmm"; 
			push(@args, "--save-lmm $lmm_file"); 
			push(@args, "--similarity $sim");  
		}else{
			if ( $lmm_file eq "" ){ 
				$lmm_file = "$p_out/lmm"; 
				push(@args, "--save-lmm $lmm_file"); 
				push(@args, "--similarity $sim");  
			}else{
				push(@args, "--load-lmm $lmm_file.npz");	
			}
		}
		push(@args, "--print-samples") if $print_samples == 1;
		
		# make argument line
		my $args_in = join(" ", @args);
	
		# command line
		my $command = "pyseer $com $file --phenotypes $phenotype --phenotype-column $p --lmm --output-patterns $p_out/$f.patterns.txt --cpu $cpus $args_in > $p_out/$f.results.tsv 2>>$p_out/$f.seer_log.txt";
		`echo $command > $p_out/$f.seer_log.txt`; 
		
		# run pyseer
		my $start_time = time();
		`echo "start time: $start_time" >> $p_out/$f.seer_log.txt`;
		
		my @time = localtime($start_time);
		my $h = $time[2];
		my $m = $time[1];
		print "\t- running pyseer (start: $h:$m)\n";
		my $seer_out = `$command`;		
		
		my $end_time = time();
		`echo "end time: $end_time" >> $p_out/$f.seer_log.txt`;
		my $complete_time = $end_time - $start_time;
		`echo "total time: $complete_time sec" >> $p_out/$f.seer_log.txt`;
		print sprintf ("\t- pyseer complete (run time: %s%s)\n", $complete_time, "s");
		
		# check that seer completed
		die " - WARNING: seer failed, see $p_out/$f.seer_log.txt\n" if $?;
		
		# subset top 1000 hits
		print "\t- sorting top hits\n";
		if ( $print_samples == 1 ){
			`cut -f 1,2,3,4,5,6,7,10 < $p_out/$f.results.tsv | sort --parallel=$cpus -g -k4,4 | head -1000 > $p_out/$f.top_hits.tsv`;
		}else{
			`cat $p_out/$f.results.tsv | sort --parallel=$cpus -g -k4,4 | head -1000 > $p_out/$f.top_hits.tsv`;		
		}
		
		# [optionally] run additional scripts
		if ( $pyseer_scripts ne "" ){
		
			# count patterns
			print "\t- counting patterns top hits\n";
			my $count_out = `python $pyseer_scripts/count_patterns.py --alpha 0.05 --memory 3000 --temp $p_out/tmp $p_out/$f.patterns.txt | tee $p_out/$f.pattern_numbers.txt`;
			print " - WARNING: count_patterns.py failed:\n$count_out\n" if $?;
			
			# filter file for significant hits after correction
			$count_out =~ /Threshold:\s+(.+)/;
			my $sig_thresh = $1;
			
			# headers
			print "\t- preparing significant hits\n";
			`head -1 $p_out/$f.results.tsv > $p_out/$f.sig_hits.tsv`;
			`awk \'\{ if (\$4 <= $sig_thresh) print \$0 \}\' < $p_out/$f.results.tsv >> $p_out/$f.sig_hits.tsv`;
			
 			# qqplot
 			unless ($no_qq == 1){
 				print "\t- creating qqplot\n";
				my $qq_out = `python $pyseer_scripts/qq_plot.py --output $p_out/$f\_qqplot.png $p_out/$f.results.tsv 2>&1`;
				print " - WARNING: qq_plot.py failed:\n$qq_out\n" if $?;	
			}	
		
		}		
		
	}
}

# feedback
print "\n - completed\n\n";

