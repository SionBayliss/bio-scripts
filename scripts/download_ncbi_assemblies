#!/usr/bin/env perl

use strict;
use warnings qw(all);

use Getopt::Long qw(GetOptions :config no_ignore_case);
use Pod::Usage;
use Cwd 'abs_path';
use File::Basename;

# download assemblies from refseq/genbank

=head1  SYNOPSIS

	download_assemblies_ncbi -i taxid -o ./path/to/output_dir/ 

 Input/output:
 -i|--input 	path to assembly_summary_refseq.txt [required]
 -o|--output 	output directory [required]
 
 Filter options:
 -t|--taxonid	output isolates with taxon id(s), comma seperated [default: off]
 -s|--status	status of assembly, options: Complete Genome, Contig, 
 		Scaffold, all [default: Complete Genome] 
 -n|--number	max number of samples to download [default: off]
 -d|--download	toggle download of isolates [default: on]	
 -g|--genebank	use genebank accessions if available [default: refseq]
 
 -h|--help 	usage information
 
=cut

# path to executing script
#my $script_path = abs_path(dirname($0));

# command line options
my $input = '';
my $output_dir = '';

my $genbank = 0;
my $taxid = "";
my $status = "Complete";
my $add_strain = 0;
my $number = "";
my $no_download = 0;
my $help = 0;

pod2usage(1) if scalar(@ARGV) == 0;
GetOptions(

	'input=s' 	=> \$input,
	'output=s'	=> \$output_dir,
	
	'genebank' => \$genbank, 
	'taxid=s' 	=> \$taxid,
	'status=s' => \$status, 
	'add-strain' => \$add_strain,
	'number=i' => \$number, 
	'download'	=> \$no_download,
	'help|?' 	=> \$help,

) or die pod2usage(1);
pod2usage(1) if $help;

# store taxids in hash 
my @ti = split(/,/, $taxid);
my %taxid_hash;
for (@ti) {$taxid_hash{$_} = 1};

# check dependencies
die " - ERROR: output directory not specified\n" if $output_dir eq "";

# make output directory
unless( -d $output_dir ){
	die " - ERROR: could not make $output_dir\n" unless mkdir $output_dir; 
}

# downloading ftp genome summary
if ($input eq "") {

	print " - input assembly_summary_refseq.txt not specified, downloading current list...\n"; 
	`wget -O - ftp://ftp.ncbi.nlm.nih.gov/genomes/ASSEMBLY_REPORTS/assembly_summary_refseq.txt 2>/dev/null > $output_dir/assembly_summary_refseq.txt`;
	
	$input = "$output_dir/assembly_summary_refseq.txt";
		
	die " - could not download ftp assembly summary.\n" if $?;
}

# feedback
print " - Downloading of isolates is disabled, only creating summary\n" if $no_download == 1;

# open output file
open SUM, ">$output_dir/summary.tab" or die " - ERROR: output summary ($output_dir/summary.tab) did not open.\n";


# parse input file - store relevant info
my $lines = 0;
my $count = 0;
my $file_type = "NA";
my %indexes = ();
my $exclude = "NA";
print " - 0 samples downloaded";
open IN, $input or die " - ERROR: input file did not open.\n";
while(<IN>){
	
	my $line = $_;
	chomp $line;
	
	my @vars = split("\t", $line, -1);
	
	# headers
	if(/^# assembly/){
		print SUM "id\t$line\n";
		$file_type = "rs";
		
		# detect columns indexes
		for my $i (0..scalar(@vars)-1){
			$indexes{"assembly"} = $i+1 if ($vars[$i] eq "# assembly_accession");
			$indexes{"species"} = $i+1 if ($vars[$i] eq "organism_name");
			$indexes{"type"} = $i+1 if ($vars[$i] eq "assembly_level");
			$indexes{"strain"} = $i+1 if ($vars[$i] eq "isolate");
			$indexes{"taxonid"} = $i+1 if ($vars[$i] eq "species_taxid");
			$indexes{"ftp"} = $i+1 if ($vars[$i] eq "ftp_path");
			
			$exclude = $i+1 if ($vars[$i] eq "excluded_from_refseq");  
		}
		
		# sanity check
		my $no_headers = scalar(keys(%indexes));
		die " - missing headers in file (n=$no_headers)\n" if $no_headers != 6; 

	}elsif(/^#Organism/){
		print SUM "id\t$line\n";
		$file_type = "gn";
		
		# detect columns indexes
		for my $i (0..scalar(@vars)-1){

			$indexes{"assembly"} = $i+1 if ($vars[$i] eq "Assembly");
			$indexes{"species"} = $i+1 if ($vars[$i] eq "#Organism Name");
			$indexes{"type"} = $i+1 if ($vars[$i] eq "Level");
			$indexes{"strain"} = $i+1 if ($vars[$i] eq "Strain");
			$indexes{"taxonid"} = $i+1 if ($vars[$i] eq "Organism Groups");
			
			$indexes{"ftp"} = $i+1 if ( ($vars[$i] eq "GenBank FTP") && ($genbank == 1) );
			$indexes{"ftp"} = $i+1 if ( ($vars[$i] eq "RefSeq FTP") && ($genbank == 0) );
						
		}

		# sanity check
		my $no_headers = scalar(keys(%indexes));
		die " - missing headers in file (n=$no_headers)\n" if $no_headers != 6; 
		
	}elsif(/^#/){
	# store info per matching isolate
	}else{
	
		++$lines;
		
		# set vars
		my $acc = ""; my $ftp = ""; my $excluded = ""; my $tax_id = ""; my $species = ""; my $type = ""; my $strain= "";
		
		# assign appropriate variables
		if ($file_type eq "rs"){ # refseq
		}elsif($file_type eq "gn"){ # ncbi genome table 
		}else{
			die " - ERROR: format of input file not recognised\n";
		}
		
		# store data per isolate 	
		if ($exclude ne "NA"){
			$excluded = $vars[$exclude-1]; # excluded
		}
		
		# vars 
		$acc = $vars[$indexes{"assembly"}-1]; # accession
		$ftp = $vars[$indexes{"ftp"}-1]; # ftp # genebank
		$tax_id = $vars[$indexes{"taxonid"}-1]; # taxonid # cladeID
		$species = $vars[$indexes{"species"}-1]; # species
		$type = $vars[$indexes{"type"}-1]; # type
		$strain = $vars[$indexes{"strain"}-1]; # strain	
		
		# check for error 
		#my $error = 0;
		#$error = 1 unless defined($acc);
		#$error = 1 unless defined($ftp);
		#$error = 1 unless defined($strain);
		#$error = 1 unless defined($tax_id);
		
		# needs work here to catch missing values
				
		# filter on taxon id and assembly status 
		if ( (($taxid eq "") || ($taxid_hash{$tax_id})) && ( ($type eq $status) || ($status eq "all") ) && ($excluded eq "") ){
		
			# get ftp isolate name
			my @split_address = split(/\//, $ftp); 
			my $f_name = $split_address[$#split_address]; # $ftp =~ /.+\/(\S+)$/; 
			my $file_name = $f_name."\_genomic\.fna\.gz";
			
			# create isolate name from accession and strain info [optional]
			my $strain_out = "";
			if ( $strain ne "" ){
			
				$strain_out = $strain unless $strain eq " ";
				if ( $strain =~ /strain=(.+)/ ){
					$strain_out = $1;		
				}		
				
				$strain_out =~ s/\-/\_/g;
				$strain_out =~ s/\s+/\_/g;
				$strain_out =~ s/\//\_/g;
			}
			
			my $iso_name = "$acc";
			$iso_name =~ s/\s+//g;
			$iso_name = "$iso_name\-$strain_out" if ( ( $add_strain == 1 ) && ( $strain_out ne "" ) );
			$iso_name =~ s/\./_/g;
			
			my $outfile = "$output_dir/$iso_name.fasta";	
					
			# run ftp on isolate
			if ($no_download == 0){
				unlink("$output_dir/$iso_name.fasta") if -f "$output_dir/$iso_name.fasta";
				`wget -O - $ftp/$file_name 2>/dev/null | gunzip -c  >  $outfile`;
			}
			
			if( !($?) || ($no_download == 0) ){
			
				# print included isolates to summary file if it downloaded correctly
				print SUM "$iso_name\t$line\n";
			
				# increment count
				++$count;
				print "\r - $count samples downloaded";
			
			}else{
				# increment count
				++$count;
				print "\r - $count samples downloaded";
			}
			
			if ($number ne ""){
				last if $count >= $number; 
			}
		}
		
	}
}

# feeback
print "\r - $count/$lines samples downloaded\n";


