#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use Pod::Usage;

# convert vcf to fasta file - filter sites that do not meet thresholds (replace with n). 

=head1  SYNOPSIS

 vcf_2_fasta -i /path/to/vcf_file -o /path/to/output_file

 Input/Output:
 -i|--input		input PIRATE.*.tsv file [required]
 -o|--output		output treeWAS input file [required]
 
 Filtering options:
 --fl|freq-low		min snp frequency to include in output 
			[default: 0.00]
 --fh|freq-high		max snp frequency to include in output 
			[default: 1.00]
 --n-sites		include n-sites [default: exclude]
			
 General:
 -h|--help		usage information
 
=cut

# switch buffer off 
 $| = 1;

# variables
my $vcf = "";
my $output = "";

my $l_threshold = 0.00;
my $h_threshold = 1;
my $ns = 0;

my $help = 0; 

GetOptions(

	'help|?' 	=> \$help,
	
	'input=s' 	=> \$vcf,
	'output=s'	=> \$output,
	
	'fl|freq-low=f' => \$l_threshold,
	'fh|freq-high=f' => \$h_threshold,
	'ns' => \$ns,
	
) or pod2usage(1);
pod2usage(1) if $help;
pod2usage( {-message => q{input vcf is a required arguement}, -exitval => 1, -verbose => 1 } ) if $vcf eq ''; 
pod2usage( {-message => q{output file is a required arguement}, -exitval => 1, -verbose => 1 } ) if $output eq ''; 

# parse vcf file.
my $no_sites = 0;
my $no_variants = 0;
my $no_stored_vars = 0;
my $n_vars = 0; 
my $no_inc_sites = 0;

my @headers = ();
my $no_samples = 0;

# open output file
open OUTPUT, ">$output.temp" or die " - ERROR: could not open output file\n";

# feedback
print " - 0 variant sites processed.";

open VCF, $vcf or die "VCF file did not open.\n";
while(<VCF>){
	
	my $l = $_;
	chomp $l;
	
	my @line = split(/\t/, $l, -1);
	
	# store headers
	if(/^#CHROM\tPOS/){	
		@headers = @line;
		$no_samples = scalar(@headers)-9;
		#print OUTPUT "$l\n";
	}
	elsif(/^#/){
		#print OUTPUT "$l\n";
	}elsif(/^\S+\t/){
	
		$no_sites++;	
		
		# sanity check
		die " - ERROR: No samples found in header line.\n" if $no_samples == 0;
		
		# variables
		my $pos = $line[1];
		my $ref = uc($line[3]);
		my $alt = uc($line[4]);
				
		# replace alternative gap characters with n
		$alt =~ s/\*|\-/N/g;
		$ref =~ s/\*|\-/N/g;
		
		# store all alleles (inc ref as allele)
		my @alleles = ( $ref , split(/,/, $alt ) );
		
		# find number Ns 
		my $n_Ns = 0;
		for (@alleles) { ++$n_Ns if $_ eq "N" };
		$n_vars += $n_Ns;
		
		# find number of alleles excluding Ns [optionally include with --n]
		my $no_alleles = @alleles;
		$no_variants += $no_alleles;
		$no_alleles = $no_alleles - $n_Ns if $ns == 0;
		
		# process if there is > 1 allele 
		if ( $no_alleles > 1 ){
			
			$no_inc_sites++;
			
			my %inc = ();
			for my $a_idx (0..$#alleles) {
		
				my $a_char = $alleles[$a_idx];
				
				# exclude ns [optionally include with --n ]
				if( ($ns == 1) || ( ($ns == 0) && ($a_char ne "N") ) ){
		
					# print a single line for each variant
					my @inc_idx = ();
					my $s_count = 0; 				
					for my $t ( 9..$#headers ){ 
			
						my $v = $line[$t];
				
						if ($v == $a_idx){
							push(@inc_idx, $t); 
							++$s_count;
						}
						
					}
		
					# frequency of variants in samples
					my $freq = $s_count/$no_samples;
		
					# store variant if between frequency thresholds
					if ( ( $freq <= $h_threshold ) && ( $freq >= $l_threshold ) ){
						
						# include base at this position
						for (@inc_idx){
							$inc{$_} = $a_char;
						}
						++$no_stored_vars;
						
					}else{
						
					}
				}
			}
			
			# print line
			my @outline = ();
			for my $t ( 9..$#headers ){ 
			
				if( $inc{$t} ){
					push(@outline, $inc{$t});
				}else{
					push(@outline, "N");
				}
			
			}
			print OUTPUT join("", @outline),"\n";
			
		}
		
		# feedback
		if ( $no_sites%1000 == 0 ){
			print "\r - $no_sites variant sites processed.";
		}
	}
	
	# test line
	#last if ($no_sites == 1000);	
			
}close VCF;
close OUTPUT;

# feedback
print "\r - $no_sites variant sites processed - $no_inc_sites included in output.\n";
print " - $no_sites sites contained $no_variants variants of which $n_vars were Ns.\n - $no_stored_vars/$no_variants variants were printed to output file [freq: $l_threshold-$h_threshold].\n";
print " - transposing temporary matrix...\n";

# transpose file and convert to fasta for snp-sim
open TEMP, "$output.temp" or die $!;
my @t = ();
while (<TEMP>) {
    my $l = $_;
    chomp $l;
    push @t, [split(//, $l)];
}
close TEMP;

# print transposed
my $col_no = @{$t[0]};
my $row_no = @t;

# make columns rows
open OUT, ">$output" or die $!;
for my $cn (0..($col_no-1)){

	my $header = $headers[$cn+9];
	my @out = map $t[$_][$cn], 0..($row_no-1); 
		
	# print to file plus header
	local $" = '';
  	print OUT ">$header\n@out\n";
}

# remove temp file
`rm $output.temp`;

# feedback 
print " - complete\n";

exit;
