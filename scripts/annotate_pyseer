#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;

# annotate pyseer output with annotation from PIRATE.

=head1  SYNOPSIS

 annotate_pyseer
 
 Input/Output:
 -i|--input		input list [required]
 -p|--pirate	output file from PIRATE [required]
 -o|--output	output file [required]	
 -v|--vcf		annotated vcf [optional]

 General:
 -h|--help		usage information
 
=cut

# command line options
my $input = '';
my $pirate = '';
my $output = '';
my $cols = '1,2,3,4,5,6';

my $vcf = "";
my $help = 0;

GetOptions(

	'help|?' 	=> \$help,
	
	'input=s' 	=> \$input,
	'pirate=s' 	=> \$pirate,
	'output=s'	=> \$output,
	'columns=s' => \$cols,
	'vcf=s' => \$vcf,
	
) or pod2usage(1);
pod2usage(1) if $help;
pod2usage( {-message => q{ - ERROR: input list is a required arguement}, -exitval => 1, -verbose => 1 } ) if $input eq ''; 
pod2usage( {-message => q{ - ERROR: input PIRATE file is a required arguement}, -exitval => 1, -verbose => 1 } ) if $pirate eq ''; 
pod2usage( {-message => q{ - ERROR: output file is a required arguement}, -exitval => 1, -verbose => 1 } ) if $output eq ''; 

# make column array
my @columns = split(/,/, $cols);

# parse input hits
my %alleles = ();
my %snps = ();
my $snp_no = 0;
my $allele_no = 0;
open LIST, $input or die " - ERROR: could not open $input\n";
while (<LIST>){

	my $line = $_;
	chomp $line;
	
	my @vars = split(/\t/, $line, -1);
	
	# store
	unless(/variant/){
	
		# store relevent info
		if ($vars[0] =~ /\d+\_(\d+)\_\S\_\S/){ # snps
			$snps{$1} = 1;
			$snp_no++;
		}else{ # alleles/presence/absence	
			$alleles{$vars[0]} = 1;
			$allele_no++;
		}
	}
	
}close LIST;

# feedback
print " - $snp_no snps found in vcf\n - $allele_no alleles found in vcf\n";

# parse PIRATE file and store annotation
my %store = ();
my $headers = ();

open PAN, $pirate or die " - ERROR: could not open $pirate\n";
while (<PAN>){

	my $line = $_;
	chomp $line;
	
	my @vars = split(/\t/, $line);
	
	my $a = $vars[0];
	
	# store headers
	if(/allele_name/){
		
		$headers = join("\t", @vars[@columns]);
		print " - printing PIRATE columns @vars[@columns]\n";
		
	}else{
		
		# store relevant info
		my $store_line = join( "\t", @vars[@columns] ); 
		$store{$a} = $store_line;
	}
	
}close PAN;

# parse annotated vcf and store info
if ($vcf ne ""){
	
	open VCF, $vcf or die $!;
	while(<VCF>){
	
		my $line  = $_;
		chomp $line;
		
		my @vars = split( /\t/, $line, -1);
		#print "$vars[1]\n";
		
		#die "yup\n" if ($vars[1] == 1023167) && ($snps{$vars[1]});
		#die "here***************\n" if $vars[1] == 1023167;
		
		# store if in hits file
		if ($snps{$vars[1]}){
			
			if ($line =~ /\[CDS\|(\S+)\|[+-]\|(.+)\|(.+)\|nt/ ){;
				my $gene_f = $1;

				my $g_name = $2;
				my $prod = $3;
			
				my $store_line  = sprintf( "%s\t%s\t%s\tNA\tNA\tNA", $gene_f, $g_name, $prod );
				$store{$vars[1]} = $store_line; 
			}
		}
		
	}close VCF; 
}

# parse input and print additional info from PIRATE

# open output file
open OUT, ">$output" or die $!;

my $count_a = 0;
my $count_s = 0;
open LIST, $input or die " - ERROR: could not open $input\n";
while (<LIST>){

	my $line = $_;
	chomp $line;
	
	my @vars = split(/\t/, $line, -1);
	
	# prepare headers
	my $outline = "";
	if(/variant/){
		$outline = sprintf( "%s\t%s\t%s\n" , $vars[0], $headers, join("\t", @vars[1..$#vars]));
	}
	# prepare info line
	else{
		
		# snps 
		if ($vars[0] =~ /\d+\_(\d+)\_\S\_\S/){
		
			if ($store{$1}){
				$outline = sprintf( "%s\t%s\t%s\n" , $vars[0], $store{$1}, join("\t", @vars[1..$#vars]) );
				$count_s++;
			}else{
				print " - ERROR: snp position $1 was not in vcf\n";
			}
			
		# gene families/alleles
		}elsif( !$store{$vars[0]} ){
			print " - WARNING: no info found for allele $a\n";
		}else{
			$outline = sprintf( "%s\t%s\t%s\n" , $vars[0], $store{$vars[0]}, join("\t", @vars[1..$#vars]) );
			$count_a++;
		}
	}
	
	# print
	print OUT $outline;
	
}close LIST;

# feedback
my $no_alleles = keys %alleles;
print " - $count_a/$allele_no alleles printed to output file.\n";
print " - $count_s/$snp_no snps printed to output file.\n";
