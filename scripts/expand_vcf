#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use Pod::Usage;

# convert a multi site vcf to a normalised vcf and retain all sites.

=head1  SYNOPSIS


 expand_vcf -i /path/to/vcf_file -o /path/to/output_file

 Input/Output:
 -i|--input		input PIRATE.*.tsv file [required]
 -o|--output		output treeWAS input file [required]
 
 Filtering options:
 --fl|freq-low		min snp frequency to include in output 
			[default: 0.00]
 --fh|freq-high		max snp frequency to include in output 
			[default: 1.00]
 -n|--n-sites	include n-sites [default: exclude]
 -s|--store-inv	store alleles that are the inverse of another [default:off] 
 -l|--list 		list of samples to include [default: off]
 --freq-inv		frequency threshold to be considered inverse allele [default: 0.98]
 --store-inv	include inverse alleles in output [default: off]	
			
 General:
 -h|--help		usage information
 
=cut

# switch buffer off 
$| = 1;

# variables
my $vcf = "";
my $output = "";

my $l_threshold = 0.00;
my $h_threshold = 1;
my $ns = 0;
my $list = '';
my $store_inv = 0;

my $inv_thresh = 0.98;

my $help = 0; 

GetOptions(

	'help|?' 	=> \$help,
	
	'input=s' 	=> \$vcf,
	'output=s'	=> \$output,
	
	'fl|freq-low=f' => \$l_threshold,
	'fh|freq-high=f' => \$h_threshold,
	
	'freq-inv=f' => \$inv_thresh,
	
	'ns' => \$ns,
	'store-inv' => \$store_inv,
	'list=s' => \$list,
	
) or pod2usage(1);
pod2usage(1) if $help;
pod2usage( {-message => q{input vcf is a required arguement}, -exitval => 1, -verbose => 1 } ) if $vcf eq ''; 
pod2usage( {-message => q{output file is a required arguement}, -exitval => 1, -verbose => 1 } ) if $output eq ''; 

# check inverse threshold
die " - inverse allele frequency threshold (--freq-inv) should be a number betwen 0-1.\n" if ( ($inv_thresh < 0) || ($inv_thresh>1));

# feedback - settings
print "\nSettings:\n";
if ($ns == 1){
	print " - including Ns in output.\n";
}else{
	print " - excluding Ns in output.\n";
}
if ($store_inv == 1){
	print " - including inverse_alleles in output.\n";
}else{
	print " - excluding inverse_alleles in output.\n";
} 
print " - inverse allele frequency = $inv_thresh\n";
print "\nRunning:\n";

# [optional] open list file
my %list  = (); 
my $no_samples_list;
if ($list ne ''){
	open LIST, $list or die " - ERROR: could not open list ($list)\n";
	while (<LIST>){
	
		my $line = $_;
		chomp $line;
		
		my @vars = split(/\t/, $line, -1);
		
		$list {$vars[0]} = 1 unless $vars[0] eq "id";
		
	}close LIST;
	
	# feedback
	$no_samples_list = keys(%list); 
	print " - $no_samples_list samples to include from list file.\n";
}

# parse vcf file.
my $no_sites = 0;
my $no_variants = 0;
my $no_stored_vars = 0;
my $n_vars = 0; 

my @headers = ();
my $no_samples = 0;
my @include = ();
my $inverse = 0;

# open output file
open OUTPUT, ">$output" or die " - ERROR: could not open output file.\n";

open VCF, $vcf or die "VCF file did not open.\n";
while(<VCF>){
	
	my $l = $_;
	chomp $l;
	
	my @line = split(/\t/, $l, -1);
	
	# store headers
	if(/^#CHROM\tPOS/){	
				
		@headers = @line;
				
		# check for samples in list 
		if ($list ne ''){
			
			for my $t ( 9..$#headers ){ 
				if ($list{$headers[$t]}){
					push(@include, $t);
					$list {$headers[$t]} = 2;
				}
			}
		
		}else{
			
			for my $t ( 9..$#headers ){ push(@include, $t) }; 	
		
		}
		
		# list missing samples
		my @missing_samples = ();
		for ( keys %list ){
			push(@missing_samples, $_) if $list{$_} == 1;
		}
		print "missing samples:\n" if scalar(@missing_samples) > 0;
		print sprintf("%s\n", join("\n", @missing_samples)) if scalar(@missing_samples) > 0;
		
		# print reduced header
		my $headerline = join("\t", @headers[0..8], @headers[@include]);
		print OUTPUT "$headerline\n";
		
		# feedback
		$no_samples = @include; 
		if($list ne ""){
			print " - $no_samples samples of $no_samples_list found in vcf headers.\n";
		}else{
			print " - $no_samples samples found in vcf headers.\n";
		}
		print " - 0 variant sites processed.";
		
	}
	elsif(/^#/){
		print OUTPUT "$l\n";
	}elsif(/^\S+\t/){
	
		$no_sites++;	
		
		# sanity check
		die " - ERROR: No samples found in header line.\n" if $no_samples == 0;
		
		# variables
		my $pos = $line[1];
		my $ref = uc($line[3]);
		my $alt = uc($line[4]);
				
		# replace alternative gap characters with n
		$alt =~ s/\*|\-/N/g;
		$ref =~ s/\*|\-/N/g;
		
		# store all alleles (inc ref as allele)
		my @alleles = ( $ref , split(/,/, $alt ) );
		
		# find number Ns 
		my $n_Ns = 0;
		for (@alleles) { ++$n_Ns if $_ eq "N" };
		$n_vars += $n_Ns;
		
		# find number of alleles excluding Ns [optionally include with --n]
		my $no_alleles = @alleles;
		$no_variants += $no_alleles;
		$no_alleles = $no_alleles - $n_Ns if $ns == 0;
		
		# reset site store
		my %site_store = ();
		my %count_store = ();
		
		# process if there is > 1 allele 
		if ( $no_alleles > 1 ){
		
			for my $a_idx (0..$#alleles) {
		
				my $a_char = $alleles[$a_idx];
				
				# exclude ns [optionally include with --n ]
				if( ($ns == 1) || ( ($ns == 0) && ($a_char ne "N") ) ){
		
					# print a single line for each variant
					my @outline = ( @line[0..3], $a_char, @line[5..8] );	
					my $s_count = 0; 				
					for my $t ( @include ){ 
			
						my $v = $line[$t];
				
						if ($v == $a_idx){
							push(@outline, "1"); 
							++$s_count;
						}else{
							push(@outline, "0"); 
						} 
					}
		
					# frequency of variants in samples
					my $freq = $s_count/$no_samples;
		
					# store variant if between frequency thresholds
					if ( ( $freq <= $h_threshold ) && ( $freq >= $l_threshold ) ){
						
						# make output line
						my $output_line = join("\t", @outline);
						
						# store line and freq
						$site_store{$a_idx+1} = $output_line;
						$count_store{$a_idx+1} = $s_count; 						
						
					}
				}
			}
		}
		
		# print site store if necessary
		my @stored_counts = values(%count_store);
		my $no_vars_stored = scalar(@stored_counts);
		my $total_count = 0;
		for (@stored_counts){ $total_count += $_ };
		 
		# check not two inverse allelles across all samples. 
		my $is_inverse = 0;
		if ( ($no_vars_stored == 2) && ($total_count >= ( $no_samples * $inv_thresh ) ) ){
			$is_inverse = 1;
			++$inverse;
		}
		
		# print appropriate info
		if ( ($store_inv == 0) && ($is_inverse == 1) ){
	
			my @indexes = sort { $count_store{$a} <=> $count_store{$b} } keys(%count_store);
			my $first_idx = $indexes[0];
			
			# print first
			print OUTPUT $site_store{$first_idx}."\n";
			
			++$no_stored_vars;
			
		}
		# otherwise print all alleles
		else{
			for my $i ( sort keys %site_store ){ 
				print OUTPUT $site_store{$i}."\n"; 
				++$no_stored_vars;
			}
		}
		
		# feedback
		if ( $no_sites%1000 == 0 ){
			print "\r - $no_sites variant sites processed.";
		}
	}
	
	# test line
	#last if ($no_sites == 10000);	
			
}close VCF;
close OUTPUT;

# feedback
print "\r - $no_sites variant sites processed.\n\nSummary:\n";
print " - $no_sites sites contained $no_variants variants.\n";
print " - $n_vars variants were Ns.\n";
print " - $inverse variants were inverse alleles.\n";
print " - $no_stored_vars/$no_variants variants were printed to output file [freq: $l_threshold-$h_threshold].\n\n";
